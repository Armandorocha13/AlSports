#!/usr/bin/env python3
"""
Script simples para padronizar fundos das imagens para branco
Usa t√©cnicas b√°sicas de processamento de imagem
"""

import os
import sys
from PIL import Image, ImageOps
from pathlib import Path

def process_image_simple(input_path, output_path):
    """
    Processa uma imagem de forma simples para fundo branco
    """
    try:
        # Abrir a imagem
        img = Image.open(input_path)
        
        # Converter para RGB se necess√°rio
        if img.mode in ('RGBA', 'LA'):
            # Criar fundo branco
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'RGBA':
                background.paste(img, mask=img.split()[-1])  # Usar canal alpha como m√°scara
            else:
                background.paste(img)
            img = background
        elif img.mode != 'RGB':
            img = img.convert('RGB')
        
        # Aplicar ajustes b√°sicos para melhorar a qualidade
        # Aumentar contraste ligeiramente
        img = ImageOps.autocontrast(img, cutoff=1)
        
        # Salvar como JPEG com fundo branco garantido
        output_path.parent.mkdir(parents=True, exist_ok=True)
        img.save(output_path, 'JPEG', quality=95, optimize=True)
        
        print(f"‚úÖ Processado: {input_path.name}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao processar {input_path.name}: {str(e)}")
        return False

def main():
    """
    Fun√ß√£o principal
    """
    input_dir = Path("public/images")
    output_dir = Path("public/images_processed")
    
    print("üñºÔ∏è  Processando imagens para fundo branco...")
    print(f"üìÅ Entrada: {input_dir}")
    print(f"üìÅ Sa√≠da: {output_dir}")
    print("-" * 50)
    
    if not input_dir.exists():
        print(f"‚ùå Diret√≥rio n√£o encontrado: {input_dir}")
        return
    
    # Extens√µes suportadas
    extensions = {'.jpg', '.jpeg', '.png', '.webp', '.bmp'}
    
    processed = 0
    total = 0
    
    # Processar todas as imagens
    for file_path in input_dir.rglob('*'):
        if file_path.is_file() and file_path.suffix.lower() in extensions:
            total += 1
            
            # Calcular caminho de sa√≠da
            relative_path = file_path.relative_to(input_dir)
            output_file = output_dir / relative_path.with_suffix('.jpg')  # Sempre salvar como JPG
            
            if process_image_simple(file_path, output_file):
                processed += 1
    
    print("-" * 50)
    print(f"‚úÖ Conclu√≠do! {processed}/{total} imagens processadas")
    print(f"üìÅ Resultado em: {output_dir}")

if __name__ == "__main__":
    main()
